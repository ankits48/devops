// git branching

git branch -branchname // create new branch
git checkout -branchname // switch to new branch
git checkout -b branchname // create and switch to new branch.

// git branching and merging

git checkout -b bugFix
git commit
git checkout main
git commit
git merge bugFix


// git rebasing

git checkout -b bugFix
git commit
git checkout main
git commit
git checkout bugFix
git rebase main

//git head

First we have to talk about "HEAD". HEAD is the symbolic name for the currently checked out commit -- it's essentially what commit you're working on top of.
HEAD always points to the most recent commit which is reflected in the working tree. Most git commands which make changes to the working tree will start by changing HEAD.
Normally HEAD points to a branch name (like bugFix). When you commit, the status of bugFix is altered and this change is visible through HEAD.
Previous

git checkout c1 // c1 is hashvalue of commit

//git Relative Refs

Moving around in Git by specifying commit hashes can get a bit tedious. In the real world you won't have a nice commit tree visualization next to your terminal, so you'll have to use git log to see hashes.
Furthermore, hashes are usually a lot longer in the real Git world as well. For instance, the hash of the commit that introduced the previous level is fed2da64c0efc5293610bdd892f82a58e8cbc5d8. Doesn't exactly roll off the tongue...
The upside is that Git is smart about hashes. It only requires you to specify enough characters of the hash until it uniquely identifies the commit. So I can type fed2 instead of the long string above.

1. (^) operator is used to point out to the previous branch commit // git checkout bugFix^
2. (~) operator is used to point out to the previous branch commit with specific value // git checkout bugFix^4

Use cases:
branch forcing : You're an expert on relative refs now, so let's actually use them for something.

One of the most common ways I use relative refs is to move branches around. You can directly reassign a branch to a commit with the -f option. So something like:
git branch -f main HEAD~3  // main : branch name HEAD: commit hash value
moves (by force) the main branch to three parents behind HEAD.
e.g : git branch -f main c1, git branch -f bugFix c3, git checkout c4, git branch -f c3~

// Reversing Changes in Git

There are many ways to reverse changes in Git. And just like committing, reversing changes in Git has both a low-level component (staging individual files or chunks) and a high-level component (how the changes are actually reversed). Our application will focus on the latter.
There are two primary ways to undo changes in Git -- one is using git reset and the other is using git revert. We will look at each of these in the next dialog
	
git reset c2 : used to reset to specific commit on local machine only.
git revert c3: used to reset to specific commit by creating new commit and pushed new changes to remote branch.



